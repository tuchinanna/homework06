name: CMake Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up dependencies (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libgtest-dev rpm dpkg-dev

      - name: Set up dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake nsis wixtoolset -y

      - name: Set up dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake googletest
          if [ ! -f "Info.plist" ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
                <key>CFBundleExecutable</key>
                <string>solver_app</string>
                <key>CFBundleIdentifier</key>
                <string>com.yourcompany.solver</string>
                <key>CFBundleName</key>
                <string>Solver</string>
                <key>CFBundleVersion</key>
                <string>1.0.0</string>
                <key>CFBundleShortVersionString</key>
                <string>1.0</string>
                <key>LSMinimumSystemVersion</key>
                <string>10.15</string>
            </dict>
            </plist>' > Info.plist
          fi
          if [ ! -f "icon.icns" ]; then
            mkdir -p tmp.iconset
            sips -z 16 16 -s format png /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericDocumentIcon.icns --out tmp.iconset/icon_16x16.png || true
            sips -z 32 32 -s format png /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericDocumentIcon.icns --out tmp.iconset/icon_16x16@2x.png || true
            iconutil -c icns tmp.iconset -o icon.icns || touch icon.icns
            rm -rf tmp.iconset
          fi

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Configure CMake
        run: cmake -S . -B _build -DCMAKE_INSTALL_PREFIX=_install

      - name: Build
        run: cmake --build _build --config Release

      - name: Run tests
        working-directory: _build
        run: ctest --output-on-failure

      - name: Package (Release)
        working-directory: _build
        run: cpack -C Release || echo "No package created"

      - name: Rename artifacts
        working-directory: _build
        shell: bash
        run: |
          mkdir -p output
          if ls *.deb 1>/dev/null 2>&1; then mv *.deb output/solver.deb; fi
          if ls *.rpm 1>/dev/null 2>&1; then mv *.rpm output/solver.rpm; fi
          if ls *.msi 1>/dev/null 2>&1; then mv *.msi output/solver.msi; fi
          if ls *.exe 1>/dev/null 2>&1; then mv *.exe output/solver-setup.exe; fi
          if ls *.dmg 1>/dev/null 2>&1; then mv *.dmg output/solver.dmg; fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-package
          path: _build/output/*

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-24.04-package
          path: ./artifacts/ubuntu

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-package
          path: ./artifacts/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-package
          path: ./artifacts/macos

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: autoversion-${{ github.sha }}
          name: "Release ${{ github.sha }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: autoversion-${{ github.sha }}
          files: ./artifacts/ubuntu/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: autoversion-${{ github.sha }}
          files: ./artifacts/windows/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: autoversion-${{ github.sha }}
          files: ./artifacts/macos/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
